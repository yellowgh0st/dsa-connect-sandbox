import { TransactionConfig } from 'web3-core';
import { AbiItem } from 'web3-utils';
import { DSA } from '.';
import { Abi } from './abi';
import { TokenInfo } from './data/token-info';
import { Spells } from './spells';
export interface GetTransactionConfigParams {
    from: NonNullable<TransactionConfig['from']>;
    to: NonNullable<TransactionConfig['to']>;
    data: NonNullable<TransactionConfig['data']>;
    value?: TransactionConfig['value'];
    gas?: TransactionConfig['gas'];
    gasPrice?: TransactionConfig['gasPrice'];
    nonce?: TransactionConfig['nonce'];
}
export declare type Connector = keyof typeof Abi.connectors;
export declare type EstimateGasParams = {
    abi: AbiItem;
    args: any;
} & Required<Pick<TransactionConfig, 'from' | 'to' | 'value'>>;
export declare class Internal {
    private dsa;
    constructor(dsa: DSA);
    /**
     * Returns TransactionObject for any calls.
     *
     * Parameter `gasPrice` must be defined in mode `node` and is optional in mode `browser`.
     *
     * Parameter `nonce` only takes effect in mode `node`.
     *
     * @param params.from
     * @param params.to
     * @param params.callData
     * @param params.value (optional)
     * @param params.gas (optional)
     * @param params.gasPrice (optional only for "browser" mode)
     * @param params.nonce (optional) mostly for "node" mode
     */
    getTransactionConfig: (params: GetTransactionConfigParams) => Promise<TransactionConfig>;
    private getNonce;
    private getGas;
    /**
     * Returns the ABI interface for any DSA contract.
     */
    getInterface: (abiItems: AbiItem[], method: string) => AbiItem | undefined;
    /**
     * Returns encoded data of any calls.
     */
    encodeMethod: (params: {
        connector: Connector;
        method: string;
        args: string[];
    }) => string;
    /**
     * Returns encoded data of spells (used via cast() mostly).
     *
     * @param params the spells instance
     * OR
     * @param params.spells the spells instance
     */
    encodeSpells: (params: Spells | {
        spells: Spells;
    }) => {
        targets: (string | void)[];
        spells: string[];
    };
    private getSpells;
    /**
     * Returns the input interface required for cast().
     */
    private getTarget;
    /**
     * Returns the input interface required for cast().
     */
    getAddress: () => Promise<string | undefined>;
    /**
     * Returns the address from token key OR checksum the address if not.
     */
    filterAddress: (token: keyof typeof TokenInfo) => string;
    /**
     * Returns the estimated gas cost.
     *
     * @param params.from the from address
     * @param params.to the to address
     * @param params.abi the ABI method single interface
     * @param params.args the method arguments
     * @param params.value the call ETH value
     */
    estimateGas: (params: EstimateGasParams) => Promise<number>;
}
